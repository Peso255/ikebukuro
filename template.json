{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Resources": {
        "DirectRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com",
                                    "edgelambda.amazonaws.com"
                                ]
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Description": "IAM role for webdirect functions, granting access to edge deployment and CloudWatch logging",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ],
                "RoleName": "web-direct-role"
            }
        },
        "ViewerFunc": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "exports.handler = (event, context, callback) => {",
                                "  const request = event.Records[0].cf.request;",
                                "  request.headers['x-forwarded-host'] = [",
                                "    { key: 'X-Forwarded-Host', value: request.headers.host[0].value }",
                                "  ];",
                                "  return callback(null, request);",
                                "};"
                            ]
                        ]
                    }
                },
                "Description": "Copies \"host\" header to \"x-forwarded-host\" to avoid CloudFront overwriting.",
                "Handler": "index.handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "DirectRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 1
            },
            "DependsOn": [
                "DirectRole"
            ]
        },
        "OriginFunc": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "'use strict';",
                                "const defaultDocument = 'index.htm';",
                                "exports.handler = (event, context, callback) => {",
                                "  const request = event.Records[0].cf.request;",
                                "  let curdomain;",
                                "  try {",
                                "    curdomain = request.headers['x-forwarded-host'][0].value;",
                                "  } catch (e) {",
                                "    curdomain = 'error';",
                                "  }",
                                "  let paths = request.uri.split('/');",
                                "  let lastPath = paths[paths.length - 1];",
                                "  let isFile = lastPath.split('.').length > 1;",
                                "  if(!isFile) {",
                                "    if(lastPath != '') {",
                                "      request.uri += '/';",
                                "    }",
                                "    request.uri += defaultDocument;",
                                "  }",
                                "  request.uri = '/' + curdomain + request.uri;",
                                "  callback(null, request);",
                                "};"
                            ]
                        ]
                    }
                },
                "Description": "Domain-based and optional index file redirect.",
                "Handler": "index.handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "DirectRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 1
            },
            "DependsOn": [
                "DirectRole"
            ]
        },
        "StoragePolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "Bucket": {
                    "Ref": "Storage"
                },
                "PolicyDocument": {
                    "Version": "2008-10-17",
                    "Id": "PolicyForCloudFrontPrivateContent",
                    "Statement": [
                        {
                            "Sid": "1",
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": {
                                    "Fn::Sub": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OAI}"
                                }
                            },
                            "Action": "s3:GetObject",
                            "Resource": {
                                "Fn::Sub": [
                                    "${BucketArn}/*",
                                    {
                                        "BucketArn": {
                                            "Fn::GetAtt": [
                                                "Storage",
                                                "Arn"
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "Sid": "2",
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": { "Ref": "SyncUserArn" }
                            },
                            "Action": ["s3:GetObject", "s3:PutObject"],
                            "Resource": {
                                "Fn::Sub": [
                                    "${BucketArn}/*",
                                    {
                                        "BucketArn": {
                                            "Fn::GetAtt": [
                                                "Storage",
                                                "Arn"
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "Sid": "3",
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": { "Ref": "SyncUserArn" }
                            },
                            "Action": "s3:ListBucket",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "Storage",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                }
            },
            "DependsOn": [
                "Storage",
                "OAI"
            ]
        },
        "Storage": {
            "Type": "AWS::S3::Bucket",
            "DeletionPolicy" : "Retain",
            "Properties": {
                "AccessControl": "Private",
                "PublicAccessBlockConfiguration":{
                    "BlockPublicAcls": true,
                    "IgnorePublicAcls": true,
                    "BlockPublicPolicy": true,
                    "RestrictPublicBuckets": true
                },
                "BucketEncryption": {
                    "ServerSideEncryptionConfiguration": [
                        {
                            "ServerSideEncryptionByDefault": {
                                "SSEAlgorithm": "AES256"
                            }
                        }
                    ]
                }
            }
        },
        "OAI": {
            "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
            "Properties": {
                "CloudFrontOriginAccessIdentityConfig": {
                    "Comment": "web-oai"
                }
            }
        },
        "Distro": {
            "Type": "AWS::CloudFront::Distribution",
            "Properties": {
                "DistributionConfig": {
                    "Aliases": {
                        "Ref": "ServedDomains"
                    },
                    "Enabled": true,
                    "PriceClass": "PriceClass_All",
                    "CustomErrorResponses": [
                        {
                            "ErrorCachingMinTTL": 60,
                            "ErrorCode": 403,
                            "ResponseCode": "404",
                            "ResponsePagePath": "/404.htm"
                        }
                    ],
                    "DefaultCacheBehavior": {
                        "LambdaFunctionAssociations": [
                            {
                                "EventType": "viewer-request",
                                "IncludeBody": false,
                                "LambdaFunctionARN": {
                                    "Ref": "ViewerFuncVer"
                                }
                            },
                            {
                                "EventType": "origin-request",
                                "IncludeBody": false,
                                "LambdaFunctionARN": {
                                    "Ref": "OriginFuncVer"
                                }
                            }
                        ],
                        "TargetOriginId": "web-default",
                        "ViewerProtocolPolicy": "redirect-to-https",
                        "MinTTL": 0,
                        "ForwardedValues": {
                            "Headers": [
                                "x-forwarded-host"
                            ],
                            "Cookies": {
                                "Forward": "none"
                            },
                            "QueryString": false,
                            "QueryStringCacheKeys": []
                        }
                    },
                    "DefaultRootObject": "",
                    "Origins": [
                        {
                            "DomainName": {
                                "Fn::GetAtt": [
                                    "Storage",
                                    "DomainName"
                                ]
                            },
                            "Id": "web-default",
                            "S3OriginConfig": {
                                "OriginAccessIdentity": {
                                    "Fn::Sub": "origin-access-identity/cloudfront/${OAI}"
                                }
                            }
                        }
                    ],
                    "ViewerCertificate": {
                        "AcmCertificateArn": {
                            "Ref": "CertArn"
                        },
                        "SslSupportMethod": "sni-only",
                        "MinimumProtocolVersion": "TLSv1.2_2019"
                    }
                }
            },
            "DependsOn": [
                "OAI",
                "OriginFuncVer"
            ]
        },
        "OriginFuncVer": {
            "Type": "AWS::Lambda::Version",
            "Properties": {
                "FunctionName": {
                    "Ref": "OriginFunc"
                }
            },
            "DependsOn": [
                "OriginFunc"
            ]
        },
        "ViewerFuncVer": {
            "Type": "AWS::Lambda::Version",
            "Properties": {
                "FunctionName": {
                    "Ref": "ViewerFunc"
                }
            },
            "DependsOn": [
                "ViewerFunc"
            ]
        }
    },
    "Parameters": {
        "ServedDomains": {
            "Type": "CommaDelimitedList",
            "Description": "Domains/CNAMEs to be served by the distribution. Enter up to 100 domains separated by commas."
        },
        "CertArn": {
            "Type": "String",
            "Description": "ARN of the cert generated via ACM to cover all domains listed in ServedDomains."
        },
        "SyncUserArn": {
            "Type": "CommaDelimitedList",
            "Description": "ARNs of automated users with read/write access to the bucket, separated by commas."
        }
    },
    "Description": "Multi-site infrastructure CloudFormation template."
}
